# Asset names
asset_names <- colnames(returns)
# Equal portfolio weights
if (allocation_type == "equal") {
weights <- rep(1/num_assets, num_assets)
}
# Minimize portfolio variance
else if (allocation_type == "variance") {
# Define objective function for optimization
objective <- function(weights) {
portfolio_variance <- t(weights) %*% cov_matrix %*% weights
return(portfolio_variance)
}
# Define constraints for optimization
constraints <- list(
eqsum = list(rep(1, num_assets) %*% weights == 1),
lb = list(weights >= 0)
)
# Solve optimization problem
opt_result <- solve.QP(Dmat = 2 * cov_matrix, dvec = rep(0, num_assets), Amat = t(rbind(rep(1, num_assets))), bvec = 1, meq = 1, factorized = FALSE)
weights <- opt_result$solution
}
# Maximize risk-adjusted returns (Sharpe ratio)
else if (allocation_type == "sharpe") {
# Define objective function for optimization
objective <- function(weights) {
portfolio_returns <- returns %*% weights
portfolio_variance <- t(weights) %*% cov_matrix %*% weights
sharpe_ratio <- -portfolio_returns / sqrt(portfolio_variance)
return(sharpe_ratio)
}
# Define constraints for optimization
constraints <- list(
eqsum = list(rep(1, num_assets) %*% weights == 1),
lb = list(weights >= 0)
)
# Solve optimization problem
opt_result <- solve.QP(Dmat = 2 * cov_matrix, dvec = rep(0, num_assets), Amat = t(rbind(rep(1, num_assets))), bvec = 1, meq = 1, factorized = FALSE)
weights <- opt_result$solution
}
else {
stop("Invalid allocation type specified!")
}
# Create output data.frame with asset names and weights
output <- data.frame(Asset = asset_names, Weight = weights)
return(output)
}
calculate_portfolio_weights(return_1, allocation_type = "equal")
calculate_portfolio_weights <- function(data, allocation_type = "equal") {
# Calculate returns and covariance matrix
returns <- data[, -1]
cov_matrix <- cov(returns)
# Number of assets
num_assets <- ncol(returns)
# Asset names
asset_names <- colnames(returns)
# Equal portfolio weights
if (allocation_type == "equal") {
weights <- rep(1/num_assets, num_assets)
}
# Minimize portfolio variance
else if (allocation_type == "variance") {
# Define objective function for optimization
objective <- function(weights) {
portfolio_variance <- t(weights) %*% cov_matrix %*% weights
return(portfolio_variance)
}
# Define constraints for optimization
constraints <- list(
eqsum = list(rep(1, num_assets) %*% weights == 1),
lb = list(weights >= 0)
)
# Solve optimization problem
opt_result <- solve.QP(Dmat = 2 * cov_matrix, dvec = rep(0, num_assets), Amat = t(rbind(rep(1, num_assets))), bvec = 1, meq = 1, factorized = FALSE)
weights <- opt_result$solution
}
# Maximize risk-adjusted returns (Sharpe ratio)
else if (allocation_type == "sharpe") {
# Define objective function for optimization
objective <- function(weights) {
portfolio_returns <- returns %*% weights
portfolio_variance <- t(weights) %*% cov_matrix %*% weights
sharpe_ratio <- -portfolio_returns / sqrt(portfolio_variance)
return(sharpe_ratio)
}
# Define constraints for optimization
constraints <- list(
eqsum = list(rep(1, num_assets) %*% weights == 1),
lb = list(weights >= 0)
)
# Solve optimization problem
opt_result <- solve.QP(Dmat = 2 * cov_matrix, dvec = rep(0, num_assets), Amat = t(rbind(rep(1, num_assets))), bvec = 1, meq = 1, factorized = FALSE)
weights <- opt_result$solution
}
else {
stop("Invalid allocation type specified!")
}
# Create output data.frame with asset names and weights
output <- data.frame(Asset = asset_names, Weight = weights)
return(output)
}
returns <- data.frame(
Date = c("2023-01-01", "2023-01-02", "2023-01-03"),
Asset1 = c(0.01, 0.02, 0.03),
Asset2 = c(0.02, 0.03, 0.01),
Asset3 = c(0.03, 0.01, 0.02)
)
# Calculate optimal portfolio weights with equal allocation
weights_equal <- calculate_portfolio_weights(returns, allocation_type = "equal")
weights_equal
# Calculate optimal portfolio weights with equal allocation
calculate_portfolio_weights(return_1, allocation_type = "equal")
returns <- data.frame(
date = c("2023-01-01", "2023-01-02", "2023-01-03"),
Asset1 = c(0.01, 0.02, 0.03),
Asset2 = c(0.02, 0.03, 0.01),
Asset3 = c(0.03, 0.01, 0.02)
)
# Calculate optimal portfolio weights with equal allocation
calculate_portfolio_weights(returns, allocation_type = "equal")
return_1
return_2
price_1 <- get_price("AAPL", omit_na = T)
price_2 <- get_price(c("AAPL","TSLA", "BTC-USD", "MSFT"), omit_na = T)
return_1 <- returns(price_1, type = "log")
return_2 <- returns(price_2, type = "log")
# Calculate optimal portfolio weights with equal allocation
calculate_portfolio_weights(return_2, allocation_type = "equal")
# Calculate optimal portfolio weights with equal allocation
calculate_portfolio_weights(return_2, allocation_type = "sharpe")
# Calculate optimal portfolio weights with equal allocation
calculate_portfolio_weights(return_2, allocation_type = "variance")
?solve.QP
??solve.QP
calculate_portfolio_weights <- function(data, allocation_type = "equal") {
# Calculate returns and covariance matrix
returns <- data[, -1]
cov_matrix <- cov(returns)
# Number of assets
num_assets <- ncol(returns)
# Asset names
asset_names <- colnames(returns)
# Equal portfolio weights
if (allocation_type == "equal") {
weights <- rep(1/num_assets, num_assets)
}
# Minimize portfolio variance
else if (allocation_type == "variance") {
# Define objective function for optimization
objective <- function(weights) {
portfolio_variance <- t(weights) %*% cov_matrix %*% weights
return(portfolio_variance)
}
# Define constraints for optimization
constraints <- list(
eqsum = list(rep(1, num_assets) %*% weights == 1,
rep(1, num_assets) %*% weights <= 1)
)
# Solve optimization problem
opt_result <- solve.QP(Dmat = 2 * cov_matrix, dvec = rep(0, num_assets), Amat = t(rbind(rep(1, num_assets))), bvec = c(1, 1), meq = 1, factorized = FALSE)
weights <- opt_result$solution
}
# Maximize risk-adjusted returns (Sharpe ratio)
else if (allocation_type == "sharpe") {
# Define objective function for optimization
objective <- function(weights) {
portfolio_returns <- returns %*% weights
portfolio_variance <- t(weights) %*% cov_matrix %*% weights
sharpe_ratio <- -portfolio_returns / sqrt(portfolio_variance)
return(sharpe_ratio)
}
# Define constraints for optimization
constraints <- list(
eqsum = list(rep(1, num_assets) %*% weights == 1,
rep(1, num_assets) %*% weights <= 1)
)
# Solve optimization problem
opt_result <- solve.QP(Dmat = 2 * cov_matrix, dvec = rep(0, num_assets), Amat = t(rbind(rep(1, num_assets))), bvec = c(1, 1), meq = 1, factorized = FALSE)
weights <- opt_result$solution
}
else {
stop("Invalid allocation type specified!")
}
# Create output data.frame with asset names and weights
output <- data.frame(Asset = asset_names, Weight = weights)
return(output)
}
# Calculate optimal portfolio weights with equal allocation
calculate_portfolio_weights(return_2, allocation_type = "variance")
calculate_portfolio_weights <- function(data, allocation_type = "equal") {
# Calculate returns and covariance matrix
returns <- data[, -1]
cov_matrix <- cov(returns)
# Number of assets
num_assets <- ncol(returns)
# Asset names
asset_names <- colnames(returns)
# Equal portfolio weights
if (allocation_type == "equal") {
weights <- rep(1/num_assets, num_assets)
}
# Minimize portfolio variance
else if (allocation_type == "variance") {
# Define objective function for optimization
objective <- function(weights) {
portfolio_variance <- t(weights) %*% cov_matrix %*% weights
return(portfolio_variance)
}
# Define constraints for optimization
constraints <- list(
eqsum = sum(weights) == 1,
lb = weights >= 0,
ub = weights <= 1
)
# Solve optimization problem
opt_result <- constrOptim(theta = rep(1/num_assets, num_assets), f = objective, ui = diag(num_assets), ci = constraints)
weights <- opt_result$par
}
# Maximize risk-adjusted returns (Sharpe ratio)
else if (allocation_type == "sharpe") {
# Define objective function for optimization
objective <- function(weights) {
portfolio_returns <- returns %*% weights
portfolio_variance <- t(weights) %*% cov_matrix %*% weights
sharpe_ratio <- -portfolio_returns / sqrt(portfolio_variance)
return(sharpe_ratio)
}
# Define constraints for optimization
constraints <- list(
eqsum = sum(weights) == 1,
lb = weights >= 0,
ub = weights <= 1
)
# Solve optimization problem
opt_result <- constrOptim(theta = rep(1/num_assets, num_assets), f = objective, ui = diag(num_assets), ci = constraints)
weights <- opt_result$par
}
else {
stop("Invalid allocation type specified!")
}
# Create output data.frame with asset names and weights
output <- data.frame(Asset = asset_names, Weight = weights)
return(output)
}
# Calculate optimal portfolio weights with equal allocation
calculate_portfolio_weights(return_2, allocation_type = "variance")
# Calculate optimal portfolio weights with equal allocation
calculate_portfolio_weights(return_2, allocation_type = "sharpe")
# Calculate optimal portfolio weights with equal allocation
calculate_portfolio_weights(return_2, allocation_type = "equall")
# Calculate optimal portfolio weights with equal allocation
calculate_portfolio_weights(return_2)
calculate_portfolio_weights <- function(data, allocation_type = "equal") {
# Calculate returns and covariance matrix
returns <- data[, -1]
cov_matrix <- cov(returns)
# Number of assets
num_assets <- ncol(returns)
# Asset names
asset_names <- colnames(returns)
# Equal portfolio weights
if (allocation_type == "equal") {
weights <- rep(1/num_assets, num_assets)
}
# Minimize portfolio variance
else if (allocation_type == "variance") {
# Define objective function for optimization
objective <- function(weights) {
portfolio_variance <- t(weights) %*% cov_matrix %*% weights
return(portfolio_variance)
}
# Define constraints for optimization
constraints <- list(
eqsum = sum(weights) == 1,
lb = weights >= 0,
ub = weights <= 1
)
# Solve optimization problem
opt_result <- constrOptim(theta = rep(1/num_assets, num_assets), f = objective, ui = diag(num_assets), ci = constraints)
weights <- opt_result$par
}
# Maximize risk-adjusted returns (Sharpe ratio)
else if (allocation_type == "sharpe") {
# Define objective function for optimization
objective <- function(weights, returns, cov_matrix) {
portfolio_returns <- returns %*% weights
portfolio_variance <- t(weights) %*% cov_matrix %*% weights
sharpe_ratio <- -portfolio_returns / sqrt(portfolio_variance)
return(sharpe_ratio)
}
# Define constraints for optimization
constraints <- list(
eqsum = sum(weights) == 1,
lb = weights >= 0,
ub = weights <= 1
)
# Solve optimization problem
opt_result <- constrOptim(theta = rep(1/num_assets, num_assets), f = objective, ui = diag(num_assets), ci = constraints, returns = returns, cov_matrix = cov_matrix)
weights <- opt_result$par
}
else {
stop("Invalid allocation type specified!")
}
# Create output data.frame with asset names and weights
output <- data.frame(Asset = asset_names, Weight = weights)
return(output)
}
# Calculate optimal portfolio weights with equal allocation
calculate_portfolio_weights(return_2, allocation_type = "variance")
calculate_portfolio_weights <- function(data, allocation_type = "equal") {
# Calculate returns and covariance matrix
returns <- data[, -1]
cov_matrix <- cov(returns)
# Number of assets
num_assets <- ncol(returns)
# Asset names
asset_names <- colnames(returns)
# Equal portfolio weights
if (allocation_type == "equal") {
weights <- rep(1/num_assets, num_assets)
}
# Minimize portfolio variance
else if (allocation_type == "variance") {
# Define objective function for optimization
objective <- function(weights, cov_matrix) {
portfolio_variance <- t(weights) %*% cov_matrix %*% weights
return(portfolio_variance)
}
# Define constraints for optimization
constraints <- list(
eqsum = sum(weights) == 1,
lb = weights >= 0,
ub = weights <= 1
)
# Solve optimization problem
opt_result <- constrOptim(theta = rep(1/num_assets, num_assets), f = objective, ui = diag(num_assets), ci = constraints, cov_matrix = cov_matrix)
weights <- opt_result$par
}
# Maximize risk-adjusted returns (Sharpe ratio)
else if (allocation_type == "sharpe") {
# Define objective function for optimization
objective <- function(weights, returns, cov_matrix) {
portfolio_returns <- returns %*% weights
portfolio_variance <- t(weights) %*% cov_matrix %*% weights
sharpe_ratio <- -portfolio_returns / sqrt(portfolio_variance)
return(sharpe_ratio)
}
# Define constraints for optimization
constraints <- list(
eqsum = sum(weights) == 1,
lb = weights >= 0,
ub = weights <= 1
)
# Solve optimization problem
opt_result <- constrOptim(theta = rep(1/num_assets, num_assets), f = objective, ui = diag(num_assets), ci = constraints, returns = returns, cov_matrix = cov_matrix)
weights <- opt_result$par
}
else {
stop("Invalid allocation type specified!")
}
# Create output data.frame with asset names and weights
output <- data.frame(Asset = asset_names, Weight = weights)
return(output)
}
# Calculate optimal portfolio weights with equal allocation
calculate_portfolio_weights(return_2, allocation_type = "variance")
library(tidyverse)
library(assetr)
library(rvest)
url <- "https://finance.yahoo.com/world-indices/"
# Read the webpage
page <- read_html(url)
# Define the base XPath
base_xpath <- '//*[@id="list-res-table"]/div[1]/table/tbody/tr'
# Scrape href values for elements 1 to 35
values <- lapply(1:35, function(i) {
xpath <- paste0(base_xpath, '[', i, ']/td[1]/a')
href <- page %>% html_node(xpath = xpath) %>% html_attr("href")
substr(href, regexpr("/", href) + 1, regexpr("\\?", href) - 1)
})
indecies <- gsub("quote/", "", values)
indecies
subset(indecies , indecies  != "%5EIPSA")
request_symbols <- subset(indecies,
!(indecies %in% c("%5EIPSA",
"%5ECASE30")))
ticker <- c(
"S&P 500",
"Dow Jones Industrial Average",
"NASDAQ Composite",
"NYSE COMPOSITE (DJ)",
"NYSE AMEX COMPOSITE INDEX",
"Cboe UK 100",
"Russell 2000",
"CBOE Volatility Index",
"FTSE 100",
"DAX PERFORMANCE-INDEX",
"CAC 40",
"ESTX 50 PR.EUR",
"Euronext 100 Index",
"BEL 20",
"MOEX Russia Index",
"Nikkei 225",
"HANG SENG INDEX",
"SSE Composite Index",
"Shenzhen Index",
"STI Index",
"S&P/ASX 200",
"ALL ORDINARIES",
"S&P BSE SENSEX",
"IDX COMPOSITE",
"FTSE Bursa Malaysia KLCI",
"S&P/NZX 50 INDEX GROSS ( GROSS",
"KOSPI Composite Index",
"TSEC weighted index",
"S&P/TSX Composite index",
"IBOVESPA",
"IPC MEXICO",
"MERVAL",
"TA-125"
)
world_indices <- data.frame(
tickers = ticker,
request_symbols = request_symbols
)
world_indices
library(devtools)
use_data("world_indices")
world_indices
save(world_indices, file = "D:\\New HD 2TR\\R-Packages\\assetr\\data\\world_indices.rda")
use_r("data")
devtools::load_all(".")
library(assetr)
worl_indices
data("world_indices")
world_indices
?world_indices
library(assetr)
data("world_indices")
?world_indices
library(assetr)
library(assetr)
data("world_indices")
?world_indices
library(assetr)
get_price("GFI.BA", omit_na = T)
get_price("TSLA.SW", omit_na = T)
# Specify the URL of the Yahoo Finance page with the list of stock tickers
url <- "https://finance.yahoo.com/screener/stocks"
# Read the HTML content of the page
page <- read_html(url)
# Use CSS selectors or XPath to extract the ticker symbols
symbols <- page %>%
html_nodes(".data-col0 a") %>%   # CSS selector for ticker symbols
html_text()
symbols
symbols <- xlsx::read.xlsx("C:\\Users\\Christian\\Downloads\\Yahoo_Finance_data.xlsx")
symbols <- xlsx::read.xlsx("C:\\Users\\Christian\\Downloads\\Yahoo_Finance_data.xlsx", sheetName = "Sheet1")
symbols <- readxl::read_excel("C:\\Users\\Christian\\Downloads\\Yahoo_Finance_data.xlsx", sheet = "Sheet1")
symbols
symbols <- readxl::read_excel("C:\\Users\\Christian\\Downloads\\Yahoo_Finance_data.xlsx", sheet = "Sheet1")
symbols
symbols
use_r("symbol_data")
View(symbols)
save(symbols, file = "D:\\New HD 2TR\\R-Packages\\assetr\\data\\symbols.rda")
library(assetr)
data("symbols")
?symbols
?world_indices
?symbols
?symbols
library(assetr)
?symbols
?world_indices
data("symbols")
?symbols
library(assetr)
data("symbols")
?symbols
?assetr::data(symbols)
use_r("symbol_data")
save(symbols, file = "D:\\New HD 2TR\\R-Packages\\assetr\\data\\symbols.rda")
library(assetr)
data("symbols")
?symbols
symbols <- readxl::read_excel("C:\\Users\\Christian\\Downloads\\Yahoo_Finance_data.xlsx", sheet = "Sheet1")
symbols
yahoo_tickers <- readxl::read_excel("C:\\Users\\Christian\\Downloads\\Yahoo_Finance_data.xlsx", sheet = "Sheet1")
tickers <- readxl::read_excel("C:\\Users\\Christian\\Downloads\\Yahoo_Finance_data.xlsx", sheet = "Sheet1")
use_data("tickers")
tickers <- readxl::read_excel("C:\\Users\\Christian\\Downloads\\Yahoo_Finance_data.xlsx", sheet = "Sheet1")
use_data("tickers")
usethis::use_data(tickers, overwrite = TRUE)
use_r("ticker_data")
devtools::load_all(".")
library(assetr)
data("tickers")
tickers
?tickers
data("world_indices")
?world_indices
help(package = "get_price")
library(assetr)
help(package = assetr)
library(devtools)
use_vignette("Intro_to_assetr", title = "Introduction to assetr")
library(assetr)
?install_github
detach("package:assetr", unload = TRUE)
install.packages("D:/New HD 2TR/R-Packages/assetr_0.0.0.9000.tar.gz", repos = NULL, type = "source")
help(package = "assetr")
