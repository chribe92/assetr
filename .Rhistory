ao = ao,
info = info))
}
# find the order that produces the lowest information criterion
min_results <- results %>%
filter(info == min(results$info))
# append the minimum results to all_results data frame
all_results <- rbind(all_results, min_results)
}
return(all_results)
}
opt_orders(data = returns[,-1], max_order = 1, type = "eGARCH")
?infocriteria
# create ugarchspec model for current combination
fit.spec <- ugarchspec(variance.model = list(model = "eGARCH",
garchOrder = c(1,1)),
mean.model = list(armaOrder = c(1,1),
include.mean = TRUE),
distribution.model = "std"
)
returns[,-1]
# fit the model to current time series
garchfit <- ugarchfit(data = returns[,-1], spec = fit.spec, solver = "hybrid")
infocriteria(garchfit)
# Findig optimal orders for GARCH-type model ----
opt_orders <- function(data, max_order = 3, type = "eGARCH"){
# Defining the range of possible orders for arma and garch
arma_order = c(max_order,max_order)
garch_order = c(max_order,max_order)
# Creating a list of all the possible combinations
orderList <- tibble(
expand.grid(0:arma_order[1], 0:arma_order[2], 0:garch_order[1], 1:garch_order[2])
) %>%
unite("armaOrder",
Var1,
Var2,
sep = ",") %>%
unite("garchOrder", Var3, Var4,sep = ",") %>%
mutate(
armaOrder = paste("c(", armaOrder, ")", sep= ""),
garchOrder = paste("c(", garchOrder, ")", sep= ""),
)
# data frame to store results for all time series
all_results <- data.frame()
# loop through each return series
for (i in 1:ncol(data)) {
# data frame to store results for current time series
results <- data.frame()
# loop through all combinations of garch and arma order
for (j in 1:nrow(orderList)) {
# get garch and arma order for current combination
go <- as.character(orderList$garchOrder[j])
ao <- as.character(orderList$armaOrder[j])
# create ugarchspec model for current combination
fit.spec <- ugarchspec(variance.model = list(model = type,
garchOrder = eval(parse(text=go))),
mean.model = list(armaOrder = eval(parse(text=ao)),
include.mean = TRUE),
distribution.model = "std"
)
# fit the model to current time series
garchfit <- ugarchfit(data = data[,i], spec = fit.spec, solver = "hybrid")
# retrieve the information criteria
AIC <- infocriteria(garchfit)[1]
BIC <- infocriteria(garchfit)[2]
HQN <- infocriteria(garchfit)[4]
# store results for current combination in results data frame
results <- rbind(results,
data.frame(ticker = colnames(data)[i],
go = go,
ao = ao,
AIC = AIC,
BIC = BIC,
HQN = HQN))
}
# find the order that produces the lowest information criterion
min_results <- results %>%
filter(info == min(results$info))
# append the minimum results to all_results data frame
all_results <- rbind(all_results, min_results)
}
return(all_results)
}
opt_orders(data = returns[,-1], max_order = 1, type = "eGARCH")
# Findig optimal orders for GARCH-type model ----
opt_orders <- function(data, max_order = 3, type = "eGARCH", criterion = "AIC"){
# Defining the range of possible orders for arma and garch
arma_order = c(max_order,max_order)
garch_order = c(max_order,max_order)
# Creating a list of all the possible combinations
orderList <- tibble(
expand.grid(0:arma_order[1], 0:arma_order[2], 0:garch_order[1], 1:garch_order[2])
) %>%
unite("armaOrder",
Var1,
Var2,
sep = ",") %>%
unite("garchOrder", Var3, Var4,sep = ",") %>%
mutate(
armaOrder = paste("c(", armaOrder, ")", sep= ""),
garchOrder = paste("c(", garchOrder, ")", sep= ""),
)
# data frame to store results for all time series
all_results <- data.frame()
# loop through each return series
for (i in 1:ncol(data)) {
# data frame to store results for current time series
results <- data.frame()
# loop through all combinations of garch and arma order
for (j in 1:nrow(orderList)) {
# get garch and arma order for current combination
go <- as.character(orderList$garchOrder[j])
ao <- as.character(orderList$armaOrder[j])
# create ugarchspec model for current combination
fit.spec <- ugarchspec(variance.model = list(model = type,
garchOrder = eval(parse(text=go))),
mean.model = list(armaOrder = eval(parse(text=ao)),
include.mean = TRUE),
distribution.model = "std"
)
# fit the model to current time series
garchfit <- ugarchfit(data = data[,i], spec = fit.spec, solver = "hybrid")
# retrieve the information criteria
if (info == "AIC") {
info <- infocriteria(garchfit)[1]
} else if (info == "BIC") {
info <- infocriteria(garchfit)[2]
} else if (info == "HQN") {
info <- infocriteria(garchfit)[4]
}
# store results for current combination in results data frame
results <- rbind(results,
data.frame(ticker = colnames(data)[i],
go = go,
ao = ao,
info = info)
)
}
# find the order that produces the lowest information criterion
min_results <- results %>%
filter(info == min(results$info))
# append the minimum results to all_results data frame
all_results <- rbind(all_results, min_results)
}
return(all_results)
}
opt_orders(data = returns[,-1],
max_order = 1,
type = "eGARCH",
criterion = "AIC")
# Findig optimal orders for GARCH-type model ----
opt_orders <- function(data, max_order = 3, type = "eGARCH", criterion = "AIC"){
# Defining the range of possible orders for arma and garch
arma_order = c(max_order,max_order)
garch_order = c(max_order,max_order)
# Creating a list of all the possible combinations
orderList <- tibble(
expand.grid(0:arma_order[1], 0:arma_order[2], 0:garch_order[1], 1:garch_order[2])
) %>%
unite("armaOrder",
Var1,
Var2,
sep = ",") %>%
unite("garchOrder", Var3, Var4,sep = ",") %>%
mutate(
armaOrder = paste("c(", armaOrder, ")", sep= ""),
garchOrder = paste("c(", garchOrder, ")", sep= ""),
)
# data frame to store results for all time series
all_results <- data.frame()
# loop through each return series
for (i in 1:ncol(data)) {
# data frame to store results for current time series
results <- data.frame()
# loop through all combinations of garch and arma order
for (j in 1:nrow(orderList)) {
# get garch and arma order for current combination
go <- as.character(orderList$garchOrder[j])
ao <- as.character(orderList$armaOrder[j])
# create ugarchspec model for current combination
fit.spec <- ugarchspec(variance.model = list(model = type,
garchOrder = eval(parse(text=go))),
mean.model = list(armaOrder = eval(parse(text=ao)),
include.mean = TRUE),
distribution.model = "std"
)
# fit the model to current time series
garchfit <- ugarchfit(data = data[,i], spec = fit.spec, solver = "hybrid")
# retrieve the information criteria
if (info == "AIC") {
info <- infocriteria(garchfit)[1]
} else if (info == "BIC") {
info <- infocriteria(garchfit)[2]
} else if (info == "HQN") {
info <- infocriteria(garchfit)[4]
}
# store results for current combination in results data frame
results <- rbind(results,
data.frame(ticker = colnames(data)[i],
go = go,
ao = ao,
info = info)
)
}
# find the order that produces the lowest information criterion
min_results <- results %>%
filter(info == min(results$info))
# append the minimum results to all_results data frame
all_results <- rbind(all_results, min_results)
}
return(all_results)
}
opt_orders(data = returns[,-1],
max_order = 1,
type = "eGARCH",
criterion = "AIC")
# Findig optimal orders for GARCH-type model ----
opt_orders <- function(data, max_order = 3, type = "eGARCH", criterion = "AIC"){
# Defining the range of possible orders for arma and garch
arma_order = c(max_order,max_order)
garch_order = c(max_order,max_order)
# Creating a list of all the possible combinations
orderList <- tibble(
expand.grid(0:arma_order[1], 0:arma_order[2], 0:garch_order[1], 1:garch_order[2])
) %>%
unite("armaOrder",
Var1,
Var2,
sep = ",") %>%
unite("garchOrder", Var3, Var4,sep = ",") %>%
mutate(
armaOrder = paste("c(", armaOrder, ")", sep= ""),
garchOrder = paste("c(", garchOrder, ")", sep= ""),
)
# data frame to store results for all time series
all_results <- data.frame()
# loop through each return series
for (i in 1:ncol(data)) {
# data frame to store results for current time series
results <- data.frame()
# loop through all combinations of garch and arma order
for (j in 1:nrow(orderList)) {
# get garch and arma order for current combination
go <- as.character(orderList$garchOrder[j])
ao <- as.character(orderList$armaOrder[j])
# create ugarchspec model for current combination
fit.spec <- ugarchspec(variance.model = list(model = type,
garchOrder = eval(parse(text=go))),
mean.model = list(armaOrder = eval(parse(text=ao)),
include.mean = TRUE),
distribution.model = "std"
)
# fit the model to current time series
garchfit <- ugarchfit(data = data[,i], spec = fit.spec, solver = "hybrid")
# retrieve the information criteria
# if (info == "AIC") {
#   info <- infocriteria(garchfit)[1]
# } else if (info == "BIC") {
#   info <- infocriteria(garchfit)[2]
# } else if (info == "HQN") {
#   info <- infocriteria(garchfit)[4]
# }
info <- infocriteria(garchfit)[1]
# store results for current combination in results data frame
results <- rbind(results,
data.frame(ticker = colnames(data)[i],
go = go,
ao = ao,
info = info)
)
}
# find the order that produces the lowest information criterion
min_results <- results %>%
filter(info == min(results$info))
# append the minimum results to all_results data frame
all_results <- rbind(all_results, min_results)
}
return(all_results)
}
opt_orders(data = returns[,-1],
max_order = 1,
type = "eGARCH")
# Findig optimal orders for GARCH-type model ----
opt_orders <- function(data, max_order = 3, type = "eGARCH", criterion = "AIC"){
# Defining the range of possible orders for arma and garch
arma_order = c(max_order,max_order)
garch_order = c(max_order,max_order)
# Creating a list of all the possible combinations
orderList <- tibble(
expand.grid(0:arma_order[1], 0:arma_order[2], 0:garch_order[1], 1:garch_order[2])
) %>%
unite("armaOrder",
Var1,
Var2,
sep = ",") %>%
unite("garchOrder", Var3, Var4,sep = ",") %>%
mutate(
armaOrder = paste("c(", armaOrder, ")", sep= ""),
garchOrder = paste("c(", garchOrder, ")", sep= ""),
)
# data frame to store results for all time series
all_results <- data.frame()
# loop through each return series
for (i in 1:ncol(data)) {
# data frame to store results for current time series
results <- data.frame()
# loop through all combinations of garch and arma order
for (j in 1:nrow(orderList)) {
# get garch and arma order for current combination
go <- as.character(orderList$garchOrder[j])
ao <- as.character(orderList$armaOrder[j])
# create ugarchspec model for current combination
fit.spec <- ugarchspec(variance.model = list(model = type,
garchOrder = eval(parse(text=go))),
mean.model = list(armaOrder = eval(parse(text=ao)),
include.mean = TRUE),
distribution.model = "std"
)
# fit the model to current time series
garchfit <- ugarchfit(data = data[,i], spec = fit.spec, solver = "hybrid")
# retrieve the information criteria
if (criterion == "AIC") {
info <- infocriteria(garchfit)[1]
} else if (criterion == "BIC") {
info <- infocriteria(garchfit)[2]
} else if (criterion == "HQN") {
info <- infocriteria(garchfit)[4]
}
# store results for current combination in results data frame
results <- rbind(results,
data.frame(ticker = colnames(data)[i],
go = go,
ao = ao,
info = info)
)
}
# find the order that produces the lowest information criterion
min_results <- results %>%
filter(info == min(results$info))
# append the minimum results to all_results data frame
all_results <- rbind(all_results, min_results)
}
return(all_results)
}
opt_orders(data = returns[,-1],
max_order = 1,
type = "eGARCH")
opt_orders(data = returns[,-1],
max_order = 1,
type = "eGARCH",
criterion = "BIC")
?ugarchspec
# Findig optimal orders for GARCH-type model ----
GARCH_orders <- function(data, max_order = 3, type = "sGARCH", criterion = "AIC"){
# Defining the range of possible orders for arma and garch
arma_order = c(max_order,max_order)
garch_order = c(max_order,max_order)
# Creating a list of all the possible combinations
orderList <- tibble(
expand.grid(0:arma_order[1], 0:arma_order[2], 0:garch_order[1], 1:garch_order[2])
) %>%
unite("armaOrder",
Var1,
Var2,
sep = ",") %>%
unite("garchOrder", Var3, Var4,sep = ",") %>%
mutate(
armaOrder = paste("c(", armaOrder, ")", sep= ""),
garchOrder = paste("c(", garchOrder, ")", sep= ""),
)
# data frame to store results for all time series
all_results <- data.frame()
# loop through each return series
for (i in 1:ncol(data)) {
# data frame to store results for current time series
results <- data.frame()
# loop through all combinations of garch and arma order
for (j in 1:nrow(orderList)) {
# get garch and arma order for current combination
go <- as.character(orderList$garchOrder[j])
ao <- as.character(orderList$armaOrder[j])
# create ugarchspec model for current combination
fit.spec <- ugarchspec(variance.model = list(model = type,
garchOrder = eval(parse(text=go))),
mean.model = list(armaOrder = eval(parse(text=ao)),
include.mean = TRUE),
distribution.model = "std"
)
# fit the model to current time series
garchfit <- ugarchfit(data = data[,i], spec = fit.spec, solver = "hybrid")
# retrieve the information criteria
if (criterion == "AIC") {
info <- infocriteria(garchfit)[1]
} else if (criterion == "BIC") {
info <- infocriteria(garchfit)[2]
} else if (criterion == "HQN") {
info <- infocriteria(garchfit)[4]
}
# store results for current combination in results data frame
results <- rbind(results,
data.frame(ticker = colnames(data)[i],
go = go,
ao = ao,
info = info)
)
}
# find the order that produces the lowest information criterion
min_results <- results %>%
filter(info == min(results$info))
# append the minimum results to all_results data frame
all_results <- rbind(all_results, min_results)
}
return(all_results)
}
GARCH_orders(data = returns[,-1],
max_order = 1,
type = "GJRGARCH",
criterion = "BIC")
GARCH_orders(data = returns[,-1],
max_order = 1,
type = "fGARCH",
criterion = "BIC")
GARCH_orders(data = returns[,-1],
max_order = 1,
type = "eGARCH",
criterion = "BIC")
GARCH_orders(data = returns[,-1],
max_order = 1,
type = "fGARCH",
criterion = "BIC")
GARCH_orders(data = returns[,-1],
max_order = 1,
type = "gjrGARCH",
criterion = "BIC")
library(assetr)
data <- returns(get_price(c("AAPL", "TSLA")))
data
# Weights if equal
ncol(data[,-1])
# Weights if equal
1/ncol(data[,-1])
colMeans(data[,-1])
mean_returns <- colMeans(data[,-1])
mean_returns
# Covariance matrix
cov(data[,-1])
# Weights if equal
weights <- 1/ncol(data[,-1])
portfolio_risk <- sqrt(t(weights) %*% (cov_mat %*% weights))
# Covariance matrix
cov_mat <- cov(data[,-1])
portfolio_risk <- sqrt(t(weights) %*% (cov_mat %*% weights))
# Weights if equal
weights <- 1/ncol(data[,-1])
weights
sample((1/ncol(data[,-1])), replace = T, ncol(ncol(data[,-1])))
sample((1/ncol(data[,-1])), replace = T, ncol(data[,-1]))
weights <- sample((1/ncol(data[,-1])), replace = T, ncol(data[,-1]))
# mean returns
mean_returns <- colMeans(data[,-1])
# Covariance matrix
cov_mat <- cov(data[,-1])
portfolio_risk <- sqrt(t(weights) %*% (cov_mat %*% weights))
portfolio_risk
integer( portfolio_risk)
integer(portfolio_risk)
portfolio_risk[[1]]
portfolio_risk <- sqrt(t(weights) %*% (cov_mat %*% weights))[[1]]
portfolio_risk
data <- returns(get_price(c("AAPL", "TSLA", "MSFT")))
data
# Weights if equal
weights <- sample((1/ncol(data[,-1])), replace = T, ncol(data[,-1]))
# mean returns
mean_returns <- colMeans(data[,-1])
# Covariance matrix
cov_mat <- cov(data[,-1])
portfolio_risk <- sqrt(t(weights) %*% (cov_mat %*% weights))[[1]]
weights
portfolio_risk <- sqrt(t(weights) %*% (cov_mat %*% weights))[[1]]
# mean returns
mean_returns <- colMeans(data[,-1])
mean_returns
portfolio_return <- (sum(weights * mean_returns)+1)-1
portfolio_return
portfolio_return <- sum(weights * mean_returns)
portfolio_return
sharpe <- portfolio_return/portfolio_risk
sharpe
weights
+1/4
+1/3
+1/5
+1/6
+1/4
+1/7
+1/10
colMeans(data[,-1])
data[,-1]
data[,-1][1,]
colMeans(data[,-1][1,])
rep(5,3)
rep(5,10)
rep(c("test", "nigger"),10)
rep(c("test", "nigger"),4)
rep(c("test", "nigger"),4)
rep(c("test", "nigger"),4)
rep(c("test", "nigger"),4)
rep(c("test", "nigger"),4)
rep(c("test", "nigger"),4)
rep(c("test", "nigger"),4)
rep(c("test", "nigger"),4)
