dates <- stock_price[-1, 1]
return_data <- data.frame(dates, returns)
return(return_data)
}
}
returns(prices[,1:2], type = "simple")
returns(prices[,1:2], type = "log")
returns(prices, type = "log")
returns(prices, type = "simple")
devtools::load_all(".")
devtools::load_all(".")
library(assetr)
?returns
devtools::load_all(".")
library(assetr)
?returns
library(assetr)
?daily_price
help(package = "dplyr")
library(assetr)
?daily_price
daily_price(tickers = "AAPL",
start_date = "2018-01-01",
end_date = "2023-05-22",
omit_na = TRUE)
prices <- daily_price(tickers = "AAPL",
start_date = "2018-01-01",
end_date = "2023-05-22",
omit_na = TRUE)
prices
returns(prices, type = "log")
prices <- daily_price(tickers = c("BTC-USD",
"ETH-USD",
"BNB-USD",
"XRP-USD",
"ADA-USD",
"DOGE-USD",
"DOT-USD",
"UNI-USD",
"LTC-USD",
"LINK-USD"),
start_date = "2018-01-01",
end_date = "2023-05-22",
omit_na = TRUE)
prices
library(assetr)
prices <- daily_price(tickers = c("BTC-USD",
"ETH-USD",
"BNB-USD",
"XRP-USD",
"ADA-USD",
"DOGE-USD",
"DOT-USD",
"UNI-USD",
"LTC-USD",
"LINK-USD"),
start_date = "2018-01-01",
end_date = "2023-05-22",
omit_na = TRUE)
prices
prices <- daily_price(tickers = c("BTC-USD",
"ETH-USD",
"BNB-USD",
"XRP-USD",
"ADA-USD",
"DOGE-USD",
"DOT-USD",
"UNI-USD",
"LTC-USD",
"LINK-USD"),
start_date = "2020-01-01",
end_date = "2023-05-22",
omit_na = TRUE)
prices <- daily_price(tickers = c("BTC-USD",
"ETH-USD",
"BNB-USD",
"XRP-USD",
"ADA-USD",
"DOGE-USD",
"DOT-USD",
"UNI-USD",
"LTC-USD",
"LINK-USD"),
start_date = "2021-01-01",
end_date = "2023-05-22",
omit_na = TRUE)
prices <- daily_price(tickers = c("BTC-USD",
"ETH-USD",
"BNB-USD",
"XRP-USD",
"ADA-USD",
"DOGE-USD",
"DOT-USD",
"UNI-USD",
"LTC-USD",
"LINK-USD"),
start_date = "2019-01-01",
end_date = "2023-05-22",
omit_na = TRUE)
prices
prices <- daily_price(tickers = c("BTC-USD",
"ETH-USD",
"BNB-USD",
"XRP-USD",
"ADA-USD",
"DOGE-USD",
"DOT-USD",
"UNI-USD",
"LTC-USD",
"LINK-USD"),
start_date = "2018-01-01",
end_date = "2023-05-22",
omit_na = TRUE)
prices
returns(prices, type = "log")
library(tidyquant)
?tidyquant
?tg_get()
tq_index_options()
tq_get(SP500)
tq_get("SP500")
tq_index("SP500")
tq_index("SP500")$symbol
symbols <- tq_index("SP500")$symbol
symbols
prices <- daily_price(tickers = symbols,
start_date = "2018-01-01",
end_date = "2023-05-22",
omit_na = TRUE)
symbols <- tq_index("SP500")$symbol[1:20]
prices <- daily_price(tickers = symbols,
start_date = "2018-01-01",
end_date = "2023-05-22",
omit_na = TRUE)
prices
returns(prices, type = "log")
symbols <- tq_index("SP500")
symbols
?tq_index
symbols
view(symbols$symbol)
symbols$symbol
symbols
symbols <- tq_index("SP500")
symbols
symbols %>%
filter(grepl("-", symbol))
symbols %>%
filter(!grepl("-",symbol))
symbols %>%
filter(!grepl("-",""), symbol)
symbols %>%
filter(!grepl("-","") %in% symbol)
grepl("-", symbols$symbol)
subset(grepl("-", symbols$symbol))
?subset()
subset(grepl("-", symbols$symbol), drop = T)
symbols
symbols %>%
filter(symbol, !grepl("-"))
?grepl
symbols %>%
filter(symbol, !grepl("-", "."))
library(tidyverse)
symbols %>%
filter(!grepl("-", symbol))
symbols <- symbols %>%
filter(!grepl("-", symbol))
symbols$symbol
prices <- daily_price(tickers = symbols$symbol,
start_date = "2018-01-01",
end_date = "2023-05-22",
omit_na = TRUE)
prices
returns(prices, type = "log")
daily_price <- function(tickers, start_date, end_date, omit_na = FALSE) {
start_date <- as.Date(start_date)
end_date <- as.Date(end_date)
dataframes <- list()
for (ticker in tickers) {
stock_data <- quantmod::getSymbols(ticker, from = start_date, to = end_date, auto.assign = FALSE)
price_col <- paste0(ticker, ".Close")
df <- data.frame(date = zoo::index(stock_data), Close = zoo::coredata(stock_data[, price_col]))
colnames(df)[2] <- ticker
dataframes[[ticker]] <- df
}
merged_df <- Reduce(function(x, y) merge(x, y, by = "date", all = TRUE), dataframes)
if (omit_na) {
merged_df <- merged_df[complete.cases(merged_df), ]
}
rownames(merged_df) <- NULL
return(merged_df)
}
daily_price("AAPL", "2017-01-01","2023-01-01", omit_na = T)
function(tickers, start_date, end_date, omit_na = FALSE, frequency = "daily") {
start_date <- as.Date(start_date)
end_date <- as.Date(end_date)
dataframes <- list()
for (ticker in tickers) {
stock_data <- quantmod::getSymbols(ticker, from = start_date, to = end_date, auto.assign = FALSE)
price_col <- paste0(ticker, ".Close")
df <- data.frame(date = zoo::index(stock_data), Close = zoo::coredata(stock_data[, price_col]))
colnames(df)[2] <- ticker
dataframes[[ticker]] <- df
}
merged_df <- Reduce(function(x, y) merge(x, y, by = "date", all = TRUE), dataframes)
if (omit_na) {
merged_df <- merged_df[complete.cases(merged_df), ]
}
rownames(merged_df) <- NULL
if (frequency == "month") {
merged_df$date <- as.Date(format(merged_df$date, "%Y-%m-01")) # Set the date to the first day of each month
merged_df <- aggregate(. ~ date, data = merged_df, FUN = mean)
} else if (frequency == "year") {
merged_df$date <- as.Date(format(merged_df$date, "%Y-01-01")) # Set the date to the first day of each year
merged_df <- aggregate(. ~ date, data = merged_df, FUN = mean)
}
return(merged_df)
}
function(tickers, start_date, end_date, omit_na = FALSE, frequency = "daily") {
start_date <- as.Date(start_date)
end_date <- as.Date(end_date)
dataframes <- list()
for (ticker in tickers) {
stock_data <- quantmod::getSymbols(ticker, from = start_date, to = end_date, auto.assign = FALSE)
price_col <- paste0(ticker, ".Close")
df <- data.frame(date = zoo::index(stock_data), Close = zoo::coredata(stock_data[, price_col]))
colnames(df)[2] <- ticker
dataframes[[ticker]] <- df
}
merged_df <- Reduce(function(x, y) merge(x, y, by = "date", all = TRUE), dataframes)
if (omit_na) {
merged_df <- merged_df[complete.cases(merged_df), ]
}
rownames(merged_df) <- NULL
if (frequency == "month") {
merged_df$date <- as.Date(format(merged_df$date, "%Y-%m-01")) # Set the date to the first day of each month
merged_df <- aggregate(. ~ date, data = merged_df, FUN = mean)
} else if (frequency == "year") {
merged_df$date <- as.Date(format(merged_df$date, "%Y-01-01")) # Set the date to the first day of each year
merged_df <- aggregate(. ~ date, data = merged_df, FUN = mean)
}
return(merged_df)
}
daily_price("AAPL", "2017-01-01","2023-01-01", omit_na = T)
price <- function(tickers, start_date, end_date, omit_na = FALSE, frequency = "daily") {
start_date <- as.Date(start_date)
end_date <- as.Date(end_date)
dataframes <- list()
for (ticker in tickers) {
stock_data <- quantmod::getSymbols(ticker, from = start_date, to = end_date, auto.assign = FALSE)
price_col <- paste0(ticker, ".Close")
df <- data.frame(date = zoo::index(stock_data), Close = zoo::coredata(stock_data[, price_col]))
colnames(df)[2] <- ticker
dataframes[[ticker]] <- df
}
merged_df <- Reduce(function(x, y) merge(x, y, by = "date", all = TRUE), dataframes)
if (omit_na) {
merged_df <- merged_df[complete.cases(merged_df), ]
}
rownames(merged_df) <- NULL
if (frequency == "month") {
merged_df$date <- as.Date(format(merged_df$date, "%Y-%m-01")) # Set the date to the first day of each month
merged_df <- aggregate(. ~ date, data = merged_df, FUN = mean)
} else if (frequency == "year") {
merged_df$date <- as.Date(format(merged_df$date, "%Y-01-01")) # Set the date to the first day of each year
merged_df <- aggregate(. ~ date, data = merged_df, FUN = mean)
}
return(merged_df)
}
price("AAPL", "2017-01-01","2023-01-01", omit_na = T)
price("AAPL", "2017-01-01","2023-01-01", omit_na = F)
price("AAPL", "2017-01-01","2023-01-01", omit_na = T, frequency = "daily")
price("AAPL", "2017-01-01","2023-01-01", omit_na = T, frequency = "tes")
price("AAPL", "2017-01-01","2023-01-01", omit_na = T, frequency = "month")
price("AAPL", "2017-01-01","2023-01-01", omit_na = T, frequency = "year")
price(c("AAPL", "TSLA"), "2017-01-01","2023-01-01", omit_na = T, frequency = "year")
price(c("AAPL", "TSLA"), "2017-01-01","2023-01-01", omit_na = T, frequency = "month")
get_price <- function(tickers, start_date, end_date, omit_na = FALSE, frequency = "daily") {
start_date <- as.Date(start_date)
end_date <- as.Date(end_date)
dataframes <- list()
for (ticker in tickers) {
stock_data <- quantmod::getSymbols(ticker,
from = start_date,
to = end_date,
auto.assign = FALSE)
price_col <- paste0(ticker,
".Close")
df <- data.frame(date = zoo::index(stock_data),
Close = zoo::coredata(stock_data[, price_col]))
colnames(df)[2] <- ticker
dataframes[[ticker]] <- df
}
merged_df <- Reduce(function(x, y) merge(x, y,
by = "date",
all = TRUE),
dataframes)
if (omit_na) {
merged_df <- merged_df[complete.cases(merged_df), ]
}
rownames(merged_df) <- NULL
if (frequency == "month") {
# Set the date to the first day of each month
merged_df$date <- as.Date(format(merged_df$date, "%Y-%m-01"))
merged_df <- aggregate(. ~ date, data = merged_df, FUN = mean)
} else if (frequency == "year") {
# Set the date to the first day of each year
merged_df$date <- as.Date(format(merged_df$date, "%Y-01-01"))
merged_df <- aggregate(. ~ date, data = merged_df, FUN = mean)
}
return(merged_df)
}
get_price(c("AAPL", "TSLA"), "2017-01-01","2023-01-01", omit_na = T, frequency = "month")
get_price(c("AAPL", "TSLA"), "2017-01-01","2023-01-01", omit_na = T, frequency = "year")
get_price(c("AAPL", "TSLA"), "2017-01-01","2023-01-01", omit_na = T, frequency = "daily")
get_price(c("AAPL", "TSLA"), "2017-01-01","2023-01-01", omit_na = T, frequency = "month")
get_price <- function(tickers, start_date, end_date, omit_na = FALSE, frequency = "daily") {
start_date <- as.Date(start_date)
end_date <- as.Date(end_date)
dataframes <- list()
for (ticker in tickers) {
stock_data <- quantmod::getSymbols(ticker,
from = start_date,
to = end_date,
auto.assign = FALSE)
price_col <- paste0(ticker,
".Close")
df <- data.frame(date = zoo::index(stock_data),
Close = zoo::coredata(stock_data[, price_col]))
colnames(df)[2] <- ticker
dataframes[[ticker]] <- df
}
merged_df <- Reduce(function(x, y) merge(x, y,
by = "date",
all = TRUE),
dataframes)
if (omit_na) {
merged_df <- merged_df[complete.cases(merged_df), ]
}
rownames(merged_df) <- NULL
if (frequency == "monthly") {
# Set the date to the first day of each month
merged_df$date <- as.Date(format(merged_df$date, "%Y-%m-01"))
merged_df <- aggregate(. ~ date, data = merged_df, FUN = mean)
} else if (frequency == "yearly") {
# Set the date to the first day of each year
merged_df$date <- as.Date(format(merged_df$date, "%Y-01-01"))
merged_df <- aggregate(. ~ date, data = merged_df, FUN = mean)
}
return(merged_df)
}
get_price(c("AAPL", "TSLA"), "2017-01-01","2023-01-01", omit_na = T, frequency = "month")
get_price <- function(tickers, start_date, end_date, omit_na = FALSE, frequency = "daily") {
start_date <- as.Date(start_date)
end_date <- as.Date(end_date)
valid_frequencies <- c("daily", "monthly", "yearly")
if (!(frequency %in% valid_frequencies)) {
warning("Invalid frequency. Please use 'daily', 'monthly', or 'yearly'.")
return(NULL)
}
dataframes <- list()
for (ticker in tickers) {
stock_data <- quantmod::getSymbols(ticker,
from = start_date,
to = end_date,
auto.assign = FALSE)
price_col <- paste0(ticker,
".Close")
df <- data.frame(date = zoo::index(stock_data),
Close = zoo::coredata(stock_data[, price_col]))
colnames(df)[2] <- ticker
dataframes[[ticker]] <- df
}
merged_df <- Reduce(function(x, y) merge(x, y,
by = "date",
all = TRUE),
dataframes)
if (omit_na) {
merged_df <- merged_df[complete.cases(merged_df), ]
}
rownames(merged_df) <- NULL
if (frequency == "monthly") {
# Set the date to the first day of each month
merged_df$date <- as.Date(format(merged_df$date, "%Y-%m-01"))
merged_df <- aggregate(. ~ date, data = merged_df, FUN = mean)
} else if (frequency == "yearly") {
# Set the date to the first day of each year
merged_df$date <- as.Date(format(merged_df$date, "%Y-01-01"))
merged_df <- aggregate(. ~ date, data = merged_df, FUN = mean)
}
return(merged_df)
}
get_price(c("AAPL", "TSLA"), "2017-01-01","2023-01-01", omit_na = T, frequency = "month")
get_price(c("AAPL", "TSLA"), "2017-01-01","2023-01-01", omit_na = T, frequency = "monthly")
get_price(c("AAPL", "TSLA"), "2017-01-01","2023-01-01", omit_na = T, frequency = "monthl")
get_price <- function(tickers, start_date, end_date, omit_na = FALSE, frequency = "daily") {
start_date <- as.Date(start_date)
end_date <- as.Date(end_date)
valid_frequencies <- c("daily", "monthly", "yearly")
if (!(frequency %in% valid_frequencies)) {
warning("Invalid frequency. Please use 'daily', 'monthly', or 'yearly'.")
return(NULL)
}
dataframes <- list()
for (ticker in tickers) {
stock_data <- quantmod::getSymbols(ticker,
from = start_date,
to = end_date,
auto.assign = FALSE)
price_col <- paste0(ticker,
".Close")
df <- data.frame(date = zoo::index(stock_data),
Close = zoo::coredata(stock_data[, price_col]))
colnames(df)[2] <- ticker
dataframes[[ticker]] <- df
}
merged_df <- Reduce(function(x, y) merge(x, y,
by = "date",
all = TRUE),
dataframes)
if (omit_na) {
merged_df <- merged_df[complete.cases(merged_df), ]
}
rownames(merged_df) <- NULL
if (frequency == "monthly") {
# Set the date to the first day of each month
merged_df$date <- as.Date(format(merged_df$date, "%Y-%m-01"))
merged_df <- aggregate(. ~ date, data = merged_df, FUN = mean)
} else if (frequency == "yearly") {
# Set the date to the first day of each year
merged_df$date <- as.Date(format(merged_df$date, "%Y-01-01"))
merged_df <- aggregate(. ~ date, data = merged_df, FUN = mean)
}
return(merged_df)
}
get_price(c("AAPL", "TSLA"), "2017-01-01","2023-01-01", omit_na = T, frequency = "monthl")
quantmod::getSymbols(c("AAPL", "TSLA"))
quantmod::getSymbols(c("AAPL", "TSLA"))
get(quantmod::getSymbols(c("AAPL", "TSLA")))
get_price <- function(tickers, start_date, end_date, omit_na = FALSE, frequency = "daily") {
start_date <- as.Date(start_date)
end_date <- as.Date(end_date)
valid_frequencies <- c("daily", "monthly", "yearly")
if (!(frequency %in% valid_frequencies)) {
warning("Invalid frequency. Please use 'daily', 'monthly', or 'yearly'.")
return(NULL)
}
dataframes <- list()
for (ticker in tickers) {
stock_data <- quantmod::getSymbols(ticker,
from = start_date,
to = end_date,
auto.assign = FALSE)
price_col <- paste0(ticker,
".Close")
df <- data.frame(date = zoo::index(stock_data),
Close = zoo::coredata(stock_data[, price_col]))
colnames(df)[2] <- ticker
dataframes[[ticker]] <- df
}
merged_df <- Reduce(function(x, y) merge(x, y,
by = "date",
all = TRUE),
dataframes)
if (omit_na) {
merged_df <- merged_df[complete.cases(merged_df), ]
}
rownames(merged_df) <- NULL
if (frequency == "monthly") {
# Set the date to the first day of each month
merged_df$date <- as.Date(format(merged_df$date, "%Y-%m-01"))
merged_df <- aggregate(. ~ date, data = merged_df, FUN = mean)
} else if (frequency == "yearly") {
# Set the date to the first day of each year
merged_df$date <- as.Date(format(merged_df$date, "%Y-01-01"))
merged_df <- aggregate(. ~ date, data = merged_df, FUN = mean)
}
return(merged_df)
}
get_price(c("AAPL", "TSLA"), "2017-01-01","2023-01-01", omit_na = T, frequency = "monthl")
get_price(c("AAPL", "TSLA"), "2017-01-01","2023-01-01", omit_na = T, frequency = "monthly")
get_price(c("AAPL", "TSLA"), "2017-01-01","2023-01-01", omit_na = T, frequency = "yearly")
get_price(c("AAPL", "TSLA"), "2017-01-01","2023-01-01", omit_na = T, frequency = "daily")
View(AAPL)
devtools::load_all(".")
library(assetr)
?get_price
?returns
devtools::load_all(".")
library(assetr)
?returns
devtools::load_all(".")
library(assetr)
?returns
library(assetr )
library(assetr)
?returns
?get_price
?qantmod
library(quantmod)
?getSymbols
library(assetr)
?get_price
library(assetr)
library(quantmod)
?getSymbols
library(assetr)
?get_price
?get_price
library(assetr)
git init
