# Set the column name to the symbol name
col_name <- paste0(symbol)
colnames(df)[2] <- col_name
# Append the data frame to the list
df_list[[symbol]] <- df
}
# Combine the individual data frames into a single dataframe
df <- Reduce(function(x, y) merge(x, y, by = "date", all = TRUE), df_list)
# Sort the dataframe by date
df <- df[order(df$date), ]
# Remove the row names (index)
rownames(df) <- NULL
# Filter out missing values if omit_na is set to TRUE
if (omit_na) {
df <- df[complete.cases(df), ]
}
return(df)
}
getr(c("TSLA", "AAPL"),
start_date = "2022-01-01",
end_date = "2023-01-01",
frequency = "monthly",
type = "adj_close",
omit_na = T)
getr(c("TSLA", "AAPL"),
start_date = "2022-01-01",
end_date = "2023-01-01",
frequency = "weekly",
type = "adj_close",
omit_na = T)
getr <- function(symbols,
start_date = "2022-05-09",
end_date = Sys.Date(),
frequency = "1d",
type = "adj_close",
omit_na = TRUE) {
symbols <- as.character(symbols)  # Convert symbols to character vector
start_date <- as.numeric(as.POSIXct(start_date))
end_date <- as.numeric(as.POSIXct(end_date))
# Frequency conversion
freq_map <- c("daily" = "1d", "weekly" = "1wk", "monthly" = "1mo")
frequency <- freq_map[frequency]
if (is.na(frequency)) {
stop("Invalid frequency. Please choose from 'daily', 'weekly', or 'monthly'.")
}
if (type %in% c("Open", "High", "Low", "Close", "adj_close", "volume")) {
type <- c(2, 3, 4, 5, 6, 7)
}
# Create a list to store individual data frames
df_list <- list()
for (symbol in symbols) {
page <- read_html(paste0("https://finance.yahoo.com/quote/",
symbol,"/history?period1=",
start_date,"&period2=",
end_date,"&interval=",frequency,"&filter=history&frequency=",
frequency,"&includeAdjustedClose=true"))
# Extract table from Yahoo Finance
price_table <- page %>%
html_nodes("table[data-test='historical-prices']") %>%
html_table(fill = TRUE) %>%
.[[1]] %>%
filter(!is.na(Open) & !grepl("[^0-9.]", Open)) %>%
mutate(Open = as.numeric(Open))
dates <- price_table[1:nrow(price_table) - 1, 1][[1]]
dates <- as.Date(dates, format = "%b %d, %Y")
obj <- price_table[1:nrow(price_table) - 1, type][[1]]
obj <- as.numeric(obj)
# Create a data frame for the current symbol
df <- data.frame(date = dates, symbol = obj, stringsAsFactors = FALSE)
# Set the column name to the symbol name
col_name <- paste0(symbol)
colnames(df)[2] <- col_name
# Append the data frame to the list
df_list[[symbol]] <- df
}
# Combine the individual data frames into a single dataframe
df <- Reduce(function(x, y) merge(x, y, by = "date", all = TRUE), df_list)
# Sort the dataframe by date
df <- df[order(df$date), ]
# Remove the row names (index)
rownames(df) <- NULL
# Filter out missing values if omit_na is set to TRUE
if (omit_na) {
df <- df[complete.cases(df), ]
}
return(df)
}
getr(c("TSLA", "AAPL"),
start_date = "2022-01-01",
end_date = "2023-01-01",
frequency = "weekly",
type = "adj_close",
omit_na = T)
getr(c("TSLA", "AAPL"),
start_date = "2022-01-01",
end_date = "2023-01-01",
frequency = "monthly",
type = "adj_close",
omit_na = T)
getr(c("TSLA", "AAPL"),
start_date = "2022-01-01",
end_date = "2023-01-01",
frequency = "monthly",
type = "adj_close",
omit_na = F)
getr(c("TSLA", "AAPL"),
start_date = "2009-01-01",
end_date = "2023-01-01",
frequency = "monthly",
type = "adj_close",
omit_na = F)
getr(c("TSLA", "AAPL"),
start_date = "2009-01-01",
end_date = "2023-01-01",
frequency = "monthly",
type = "adj_close",
omit_na = T)
getr(c("TSLA", "AAPL"),
start_date = "2012-01-01",
end_date = "2023-01-01",
frequency = "monthly",
type = "adj_close",
omit_na = T)
head(getr(c("TSLA", "AAPL"),
start_date = "2012-01-01",
end_date = "2023-01-01",
frequency = "monthly",
type = "adj_close",
omit_na = T)
)
head(getr(c("TSLA", "AAPL"),
start_date = "2012-01-01",
end_date = "2023-01-01",
frequency = "monthly",
type = "adj_close",
omit_na = F)
)
head(getr(c("TSLA", "AAPL"),
start_date = "2015-01-01",
end_date = "2023-01-01",
frequency = "monthly",
type = "adj_close",
omit_na = F)
)
View(getr(c("TSLA", "AAPL"),
start_date = "2015-01-01",
end_date = "2023-01-01",
frequency = "monthly",
type = "adj_close",
omit_na = F)
)
getr <- function(symbols,
start_date = "2022-05-09",
end_date = Sys.Date(),
frequency = "1d",
type = "adj_close",
omit_na = TRUE) {
symbols <- as.character(symbols)  # Convert symbols to character vector
start_date <- as.numeric(as.POSIXct(start_date))
end_date <- as.numeric(as.POSIXct(end_date))
# Frequency conversion
freq_map <- c("daily" = "1d", "weekly" = "1wk", "monthly" = "1mo")
frequency <- freq_map[frequency]
if (is.na(frequency)) {
stop("Invalid frequency. Please choose from 'daily', 'weekly', or 'monthly'.")
}
if (type %in% c("Open", "High", "Low", "Close", "adj_close", "volume")) {
type <- c(2, 3, 4, 5, 6, 7)
}
# Create a list to store individual data frames
df_list <- list()
for (symbol in symbols) {
page <- read_html(paste0("https://finance.yahoo.com/quote/",
symbol,"/history?period1=",
start_date,"&period2=",
end_date,"&interval=1d&filter=history&frequency=",
frequency,"&includeAdjustedClose=true"))
# Extract table from Yahoo Finance
price_table <- page %>%
html_nodes("table[data-test='historical-prices']") %>%
html_table(fill = TRUE) %>%
.[[1]] %>%
filter(!is.na(Open) & !grepl("[^0-9.]", Open)) %>%
mutate(Open = as.numeric(Open))
dates <- price_table[1:nrow(price_table) - 1, 1][[1]]
dates <- as.Date(dates, format = "%b %d, %Y")
obj <- price_table[1:nrow(price_table) - 1, type][[1]]
obj <- as.numeric(obj)
# Create a data frame for the current symbol
df <- data.frame(date = dates, symbol = obj, stringsAsFactors = FALSE)
# Set the column name to the symbol name
col_name <- paste0(symbol)
colnames(df)[2] <- col_name
# Append the data frame to the list
df_list[[symbol]] <- df
}
# Merge the individual data frames based on the date column
df <- Reduce(function(x, y) merge(x, y, by = "date", all = TRUE), df_list)
# Sort the dataframe by date
df <- df[order(df$date), ]
# Remove the row names (index)
rownames(df) <- NULL
# Filter out missing values if omit_na is set to TRUE
if (omit_na) {
df <- df[complete.cases(df), ]
}
return(df)
}
View(getr(c("TSLA", "AAPL"),
start_date = "2015-01-01",
end_date = "2023-01-01",
frequency = "monthly",
type = "adj_close",
omit_na = F)
)
getr(c("TSLA", "AAPL"),
start_date = "2015-01-01",
end_date = "2023-01-01",
frequency = "monthly",
type = "adj_close",
omit_na = F)
getr <- function(symbols,
start_date = "2022-05-09",
end_date = Sys.Date(),
frequency = "1d",
type = "adj_close",
omit_na = TRUE) {
symbols <- as.character(symbols)  # Convert symbols to character vector
start_date <- as.numeric(as.POSIXct(start_date))
end_date <- as.numeric(as.POSIXct(end_date))
# Frequency conversion
freq_map <- c("daily" = "1d", "weekly" = "1wk", "monthly" = "1mo")
frequency <- freq_map[frequency]
if (is.na(frequency)) {
stop("Invalid frequency. Please choose from 'daily', 'weekly', or 'monthly'.")
}
if (type %in% c("Open", "High", "Low", "Close", "adj_close", "volume")) {
type <- c(2, 3, 4, 5, 6, 7)
}
# Create a list to store individual data frames
df_list <- list()
for (symbol in symbols) {
page <- read_html(paste0("https://finance.yahoo.com/quote/",
symbol,"/history?period1=",
start_date,"&period2=",
end_date,"&interval=",frequency,"&filter=history&frequency=",
frequency,"&includeAdjustedClose=true"))
# Extract table from Yahoo Finance
price_table <- page %>%
html_nodes("table[data-test='historical-prices']") %>%
html_table(fill = TRUE) %>%
.[[1]] %>%
filter(!is.na(Open) & !grepl("[^0-9.]", Open)) %>%
mutate(Open = as.numeric(Open))
dates <- price_table[1:nrow(price_table) - 1, 1][[1]]
dates <- as.Date(dates, format = "%b %d, %Y")
obj <- price_table[1:nrow(price_table) - 1, type][[1]]
obj <- as.numeric(obj)
# Create a data frame for the current symbol
df <- data.frame(date = dates, symbol = obj, stringsAsFactors = FALSE)
# Set the column name to the symbol name
col_name <- paste0(symbol)
colnames(df)[2] <- col_name
# Append the data frame to the list
df_list[[symbol]] <- df
}
# Combine the individual data frames into a single dataframe
df <- Reduce(function(x, y) merge(x, y, by = "date", all = TRUE), df_list)
# Sort the dataframe by date
df <- df[order(df$date), ]
# Remove the row names (index)
rownames(df) <- NULL
# Filter out missing values if omit_na is set to TRUE
if (omit_na) {
df <- df[complete.cases(df), ]
}
return(df)
}
getr(c("TSLA", "AAPL"),
start_date = "2015-01-01",
end_date = "2023-01-01",
frequency = "monthly",
type = "adj_close",
omit_na = F)
library(devtools)
use_r("data")
use_r("descr_stat")
library(assetr)
price <- get_price("AAPL", start_date = "2020-01-01", end_date = today(), omit_na = T)
today()
price <- get_price("AAPL", start_date = "2020-01-01", end_date = lubridate::today(), omit_na = T)
price
price <- get_price("AAPL", start_date = "2020-01-01", end_date = lubridate::today(), omit_na = T)
price[,1]
price[,2]
mean(price[,2])
sd(price[,2])
moments::kurtosis(price[,2])
df <- data.frame(
mean = mean(price[,2]),
stdDev = sd(price[,2]),
sharpe = mean/stdDev,
kurtosis = moments::kurtosis(price[,2]),
skewness = moments::skewness(price[,2]),
min = min(price[,2]),
max = max(price[,2])
)
df <- data.frame(
mean <- mean(price[,2]),
stdDev <- sd(price[,2]),
sharpe <- mean/stdDev,
kurtosis <- moments::kurtosis(price[,2]),
skewness <- moments::skewness(price[,2]),
min <- min(price[,2]),
max <- max(price[,2])
)
df
View(df)
df <- data.frame(
mean <- mean(price[,2]),
stdDev <- sd(price[,2]),
sharpe <- mean/stdDev,
kurtosis <- moments::kurtosis(price[,2]),
skewness <- moments::skewness(price[,2]),
min <- min(price[,2]),
max <- max(price[,2])
)
View(df)
mean(price[,2])
mean(price[,2])[1]
mean(price[,2])[[1]]
df <- tibble(
mean <- mean(price[,2]),
stdDev <- sd(price[,2]),
sharpe <- mean/stdDev,
kurtosis <- moments::kurtosis(price[,2]),
skewness <- moments::skewness(price[,2]),
min <- min(price[,2]),
max <- max(price[,2])
)
df <- data.frame(
mean <- mean(price[,2]),
stdDev <- sd(price[,2]),
sharpe <- mean/stdDev,
kurtosis <- moments::kurtosis(price[,2]),
skewness <- moments::skewness(price[,2]),
min <- min(price[,2]),
max <- max(price[,2])
)
descr_stat <- function(data) {
if (ncol(data) == 2){
df <- data.frame(
mean <- mean(data[,2]),
stdDev <- sd(data[,2]),
sharpe <- mean/stdDev,
kurtosis <- moments::kurtosis(data[,2]),
skewness <- moments::skewness(data[,2]),
min <- min(data[,2]),
max <- max(data[,2])
)
return(df)
} else
return("test")
}
price
descr_stat(price)
view(descr_stat(price))
View(descr_stat(price))
descr_stat <- function(data) {
if (ncol(data) == 2){
df <- data.frame(
average <- mean(data[,2]),
stdDev <- sd(data[,2]),
sharpe <- mean/stdDev,
kurtosis <- moments::kurtosis(data[,2]),
skewness <- moments::skewness(data[,2]),
min <- min(data[,2]),
max <- max(data[,2])
)
return(df)
} else
return("test")
}
View(descr_stat(price))
price
setNames(setnames(my_dataframe, old = c('date','AAPL'),
new = c('test1','test2')))
setnames(setnames(my_dataframe, old = c('date','AAPL'),
new = c('test1','test2')))
setnames(setnames(price, old = c('date','AAPL'),
new = c('test1','test2')))
setNames(setnames(price, old = c('date','AAPL'),
new = c('test1','test2')))
setNames(setnames(price, old = c('date','AAPL'),
nm = c('test1','test2')))
?df
?data.frame
descr_stat <- function(data) {
if (ncol(data) == 2){
df <- data.frame(
average <- mean(data[,2]),
stdDev <- sd(data[,2]),
sharpe <- mean/stdDev,
kurtosis <- moments::kurtosis(data[,2]),
skewness <- moments::skewness(data[,2]),
min <- min(data[,2]),
max <- max(data[,2])
, row.names = NULL, check.names = F)
return(df)
} else
return("test")
}
View(descr_stat(price))
df <- data.frame(
average <- mean(data[,2]),
stdDev <- sd(data[,2]),
sharpe <- mean/stdDev,
kurtosis <- moments::kurtosis(data[,2]),
skewness <- moments::skewness(data[,2]),
min <- min(data[,2]),
max <- max(data[,2])
, row.names = NULL, check.names = T)
descr_stat <- function(data) {
if (ncol(data) == 2){
df <- data.frame(
average <- mean(data[,2]),
stdDev <- sd(data[,2]),
sharpe <- mean/stdDev,
kurtosis <- moments::kurtosis(data[,2]),
skewness <- moments::skewness(data[,2]),
min <- min(data[,2]),
max <- max(data[,2])
, row.names = NULL, check.names = T)
return(df)
} else
return("test")
}
View(descr_stat(price))
descr_stat <- function(data) {
if (ncol(data) == 2){
df <- data.frame(
average <- mean(data[,2]),
stdDev <- sd(data[,2]),
sharpe <- mean/stdDev,
kurtosis <- moments::kurtosis(data[,2]),
skewness <- moments::skewness(data[,2]),
min <- min(data[,2]),
max <- max(data[,2])
, row.names = NULL, check.names = T)
df <- data.frame(lapply(l, function(x) x[-1]))
names(df) <- lapply(l, function(x) x[1])
return(df)
} else
return("test")
}
View(descr_stat(price))
descr_stat <- function(data) {
if (ncol(data) == 2){
df <- data.frame(
average <- mean(data[,2]),
stdDev <- sd(data[,2]),
sharpe <- mean/stdDev,
kurtosis <- moments::kurtosis(data[,2]),
skewness <- moments::skewness(data[,2]),
min <- min(data[,2]),
max <- max(data[,2])
, row.names = NULL, check.names = T)
df <- data.frame(lapply(df, function(x) x[-1]))
names(df) <- lapply(df, function(x) x[1])
return(df)
} else
return("test")
}
View(descr_stat(price))
descr_stat <- function(data) {
if (ncol(data) == 2){
mean = mean(data[,2])
stdDev = sd(data[,2])
df <- data.frame(
average = mean,
stdDev = stdDev,
sharpe = mean/stdDev,
kurtosis = moments::kurtosis(data[,2]),
skewness = moments::skewness(data[,2]),
min = min(data[,2]),
max = max(data[,2]),
row.names = NULL, check.names = T)
return(df)
} else
return("test")
}
View(descr_stat(price))
descr_stat(price)
}
descr_stat <- function(data) {
if (ncol(data) == 2){
mean = mean(data[,2])
stdDev = sd(data[,2])
df <- data.frame(
mean = mean,
stdDev = stdDev,
sharpe = mean/stdDev,
kurtosis = moments::kurtosis(data[,2]),
skewness = moments::skewness(data[,2]),
min = min(data[,2]),
max = max(data[,2]),
row.names = NULL, check.names = T)
return(df)
} else
return("test")
}
descr_stat(price)
