frequency = "daily") {
start_date <- as.Date(start_date)
end_date <- as.Date(end_date)
valid_frequencies <- c("daily", "monthly", "yearly")
if (!(frequency %in% valid_frequencies)) {
warning("Invalid frequency. Please use 'daily', 'monthly', or 'yearly'.")
return(NULL)
}
dataframes <- list()
for (ticker in tickers) {
stock_data <- quantmod::getSymbols(ticker,
from = start_date,
to = end_date,
auto.assign = FALSE
)
price_col <- paste0(ticker, ".Close")
df <- data.frame(date = zoo::index(stock_data),
Close = zoo::coredata(stock_data[, price_col]))
colnames(df)[2] <- ticker
dataframes[[ticker]] <- df
}
merged_df <- Reduce(function(x, y) merge(x, y,
by = "date",
all = TRUE),
dataframes)
if (frequency == "daily") {
if (omit_na) {
merged_df <- merged_df[complete.cases(merged_df), ]
}
} else if (frequency == "monthly") {
# Set the date to the first day of each month
merged_df$date <- as.Date(format(merged_df$date, "%Y-%m-01"))
} else if (frequency == "yearly") {
# Set the date to the first day of each year
merged_df$date <- as.Date(format(merged_df$date, "%Y-01-01"))
}
if (omit_na) {
merged_df <- merged_df[complete.cases(merged_df), ]
}
merged_df <- aggregate(. ~ date, data = merged_df, FUN = mean)
rownames(merged_df) <- NULL
return(merged_df)
}
# TEST ENV ============================================
View(
testprice(c("TSLA", "AAPL", "BTC-USD", "ADA-USD"),
omit_na = F,
start_date = "2000-01-01",
frequency = "daily")
)
# Function ENV ============================================
testprice <- function(tickers,
start_date = (lubridate::today() - 365),
end_date = lubridate::today(),
omit_na = FALSE,
frequency = "daily") {
start_date <- as.Date(start_date)
end_date <- as.Date(end_date)
valid_frequencies <- c("daily", "monthly", "yearly")
if (!(frequency %in% valid_frequencies)) {
warning("Invalid frequency. Please use 'daily', 'monthly', or 'yearly'.")
return(NULL)
}
dataframes <- list()
for (ticker in tickers) {
stock_data <- quantmod::getSymbols(ticker,
from = start_date,
to = end_date,
auto.assign = FALSE
)
price_col <- paste0(ticker, ".Close")
df <- data.frame(date = zoo::index(stock_data),
Close = zoo::coredata(stock_data[, price_col]))
colnames(df)[2] <- ticker
dataframes[[ticker]] <- df
}
merged_df <- Reduce(function(x, y) merge(x, y,
by = "date",
all = TRUE),
dataframes)
if (frequency == "daily") {
if (omit_na) {
merged_df <- merged_df[complete.cases(merged_df), ]
}
} else if (frequency == "monthly") {
# Set the date to the first day of each month
merged_df$date <- as.Date(format(merged_df$date, "%Y-%m-01"))
} else if (frequency == "yearly") {
# Set the date to the first day of each year
merged_df$date <- as.Date(format(merged_df$date, "%Y-01-01"))
}
if (omit_na) {
merged_df <- merged_df[complete.cases(merged_df), ]
}
merged_df <- aggregate(. ~ date, data = merged_df, FUN = mean)
rownames(merged_df) <- NULL
return(merged_df)
}
# TEST ENV ============================================
View(
testprice(c("TSLA", "AAPL", "BTC-USD", "ADA-USD"),
omit_na = F,
start_date = "2000-01-01",
frequency = "daily")
)
# TEST ENV ============================================
View(
testprice(c("TSLA", "AAPL", "BTC-USD", "ADA-USD"),
omit_na = T,
start_date = "2000-01-01",
frequency = "daily")
)
# Function ENV ============================================
testprice <- function(tickers,
start_date = (lubridate::today() - 365),
end_date = lubridate::today(),
omit_na = FALSE,
frequency = "daily") {
start_date <- as.Date(start_date)
end_date <- as.Date(end_date)
valid_frequencies <- c("daily", "monthly", "yearly")
if (!(frequency %in% valid_frequencies)) {
warning("Invalid frequency. Please use 'daily', 'monthly', or 'yearly'.")
return(NULL)
}
dataframes <- list()
for (ticker in tickers) {
stock_data <- quantmod::getSymbols(ticker,
from = start_date,
to = end_date,
auto.assign = FALSE
)
price_col <- paste0(ticker, ".Close")
df <- data.frame(date = zoo::index(stock_data),
Close = zoo::coredata(stock_data[, price_col]))
colnames(df)[2] <- ticker
dataframes[[ticker]] <- df
}
merged_df <- Reduce(function(x, y) merge(x, y,
by = "date",
all = TRUE),
dataframes)
if (frequency == "monthly") {
# Set the date to the first day of each month
merged_df$date <- as.Date(format(merged_df$date, "%Y-%m-01"))
merged_df <- aggregate(. ~ date, data = merged_df, FUN = mean, na.rm = omit_na)
} else if (frequency == "yearly") {
# Set the date to the first day of each year
merged_df$date <- as.Date(format(merged_df$date, "%Y-01-01"))
merged_df <- aggregate(. ~ date, data = merged_df, FUN = mean, na.rm = omit_na)
}
if (omit_na) {
merged_df <- merged_df[complete.cases(merged_df), ]
}
rownames(merged_df) <- NULL
return(merged_df)
}
# TEST ENV ============================================
View(
testprice(c("TSLA", "AAPL", "BTC-USD", "ADA-USD"),
omit_na = T,
start_date = "2000-01-01",
frequency = "daily")
)
# TEST ENV ============================================
View(
testprice(c("TSLA", "AAPL", "BTC-USD", "ADA-USD"),
omit_na = F,
start_date = "2000-01-01",
frequency = "daily")
)
# TEST ENV ============================================
View(
testprice(c("TSLA", "AAPL", "BTC-USD", "ADA-USD"),
omit_na = F,
start_date = "2000-01-01",
frequency = "monthly")
)
# Function ENV ============================================
testprice <- function(tickers,
start_date = (lubridate::today() - 365),
end_date = lubridate::today(),
omit_na = FALSE,
frequency = "daily") {
start_date <- as.Date(start_date)
end_date <- as.Date(end_date)
valid_frequencies <- c("daily", "monthly", "yearly")
if (!(frequency %in% valid_frequencies)) {
warning("Invalid frequency. Please use 'daily', 'monthly', or 'yearly'.")
return(NULL)
}
dataframes <- list()
for (ticker in tickers) {
stock_data <- quantmod::getSymbols(ticker,
from = start_date,
to = end_date,
auto.assign = FALSE
)
price_col <- paste0(ticker, ".Close")
df <- data.frame(date = zoo::index(stock_data),
Close = zoo::coredata(stock_data[, price_col]))
colnames(df)[2] <- ticker
dataframes[[ticker]] <- df
}
merged_df <- Reduce(function(x, y) merge(x, y,
by = "date",
all = TRUE),
dataframes)
if (omit_na) {
merged_df <- merged_df[complete.cases(merged_df), ]
}
if (frequency == "monthly") {
# Set the date to the first day of each month
merged_df$date <- as.Date(format(merged_df$date, "%Y-%m-01"))
merged_df <- aggregate(. ~ date, data = merged_df, FUN = mean, na.rm = omit_na)
} else if (frequency == "yearly") {
# Set the date to the first day of each year
merged_df$date <- as.Date(format(merged_df$date, "%Y-01-01"))
merged_df <- aggregate(. ~ date, data = merged_df, FUN = mean, na.rm = omit_na)
}
rownames(merged_df) <- NULL
return(merged_df)
}
# TEST ENV ============================================
View(
testprice(c("TSLA", "AAPL", "BTC-USD", "ADA-USD"),
omit_na = F,
start_date = "2000-01-01",
frequency = "monthly")
)
# TEST ENV ============================================
View(
testprice(c("TSLA", "AAPL", "BTC-USD", "ADA-USD"),
omit_na = F,
start_date = "2000-01-01",
frequency = "daily")
)
daily_nas <- testprice(c("TSLA", "AAPL", "BTC-USD", "ADA-USD"),
omit_na = F,
start_date = "2000-01-01",
frequency = "daily")
daily_nas
head(daily_nas)
tail(daily_nas)
# Convert date column to Date class
daily_nas$date <- as.Date(daily_nas$date)
# Set the date to the first day of each month
daily_nas$date <- as.Date(format(daily_nas$date, "%Y-%m-01"))
# Aggregate by month and calculate the mean
aggregated_df <- aggregate(value ~ date, data = daily_nas, FUN = function(x) mean(x, na.rm = TRUE))
# Create a new data frame for aggregated results
aggregated_df <- data.frame(date = unique(daily_nas$date), stringsAsFactors = FALSE)
# Loop through each column (except the date column) and calculate the mean by month
for (col in names(daily_nas)[-1]) {
aggregated_df[[col]] <- aggregate(daily_nas[[col]], by = list(daily_nas$date), FUN = function(x) mean(x, na.rm = TRUE))$x
}
aggregated_df
# Function ENV ============================================
testprice <- function(tickers,
start_date = (lubridate::today() - 365),
end_date = lubridate::today(),
omit_na = FALSE,
frequency = "daily") {
start_date <- as.Date(start_date)
end_date <- as.Date(end_date)
valid_frequencies <- c("daily", "monthly", "yearly")
if (!(frequency %in% valid_frequencies)) {
warning("Invalid frequency. Please use 'daily', 'monthly', or 'yearly'.")
return(NULL)
}
dataframes <- list()
for (ticker in tickers) {
stock_data <- quantmod::getSymbols(ticker,
from = start_date,
to = end_date,
auto.assign = FALSE
)
price_col <- paste0(ticker, ".Close")
df <- data.frame(date = zoo::index(stock_data),
Close = zoo::coredata(stock_data[, price_col]))
colnames(df)[2] <- ticker
dataframes[[ticker]] <- df
}
merged_df <- Reduce(function(x, y) merge(x, y,
by = "date",
all = TRUE),
dataframes)
if (omit_na) {
merged_df <- merged_df[complete.cases(merged_df), ]
}
if (frequency == "monthly") {
# Set the date to the first day of each month
merged_df$date <- as.Date(format(merged_df$date, "%Y-%m-01"))
aggregated_df <- data.frame(date = unique(merged_df$date), stringsAsFactors = FALSE)
for (col in names(merged_df)[-1]) {
aggregated_df[[col]] <- aggregate(merged_df[[col]], by = list(merged_df$date), FUN = function(x) mean(x, na.rm = !omit_na))$x
}
merged_df <- aggregated_df
} else if (frequency == "yearly") {
# Set the date to the first day of each year
merged_df$date <- as.Date(format(merged_df$date, "%Y-01-01"))
aggregated_df <- data.frame(date = unique(merged_df$date), stringsAsFactors = FALSE)
for (col in names(merged_df)[-1]) {
aggregated_df[[col]] <- aggregate(merged_df[[col]], by = list(merged_df$date), FUN = function(x) mean(x, na.rm = !omit_na))$x
}
merged_df <- aggregated_df
}
rownames(merged_df) <- NULL
return(merged_df)
}
daily_nas <- testprice(c("TSLA", "AAPL", "BTC-USD", "ADA-USD"),
omit_na = F,
start_date = "2000-01-01",
frequency = "daily")
tail(daily_nas)
daily_nas <- testprice(c("TSLA", "AAPL", "BTC-USD", "ADA-USD"),
omit_na = F,
start_date = "2000-01-01",
frequency = "monthly")
tail(daily_nas)
View(daily_nas)
daily_nas <- testprice(c("TSLA", "AAPL", "BTC-USD", "ADA-USD"),
omit_na = F,
start_date = "2000-01-01",
frequency = "yearly")
View(daily_nas)
daily_nas <- testprice(c("TSLA", "AAPL", "BTC-USD", "ADA-USD"),
omit_na = F,
start_date = "2000-01-01",
frequency = "daily")
View(daily_nas)
# Function ENV ============================================
testprice <- function(tickers,
start_date = (lubridate::today() - 365),
end_date = lubridate::today(),
omit_na = FALSE,
frequency = "daily") {
start_date <- as.Date(start_date)
end_date <- as.Date(end_date)
valid_frequencies <- c("daily", "monthly", "yearly")
if (!(frequency %in% valid_frequencies)) {
warning("Invalid frequency. Please use 'daily', 'monthly', or 'yearly'.")
return(NULL)
}
dataframes <- list()
for (ticker in tickers) {
stock_data <- quantmod::getSymbols(ticker,
from = start_date,
to = end_date,
auto.assign = FALSE
)
price_col <- paste0(ticker, ".Close")
df <- data.frame(date = zoo::index(stock_data),
Close = zoo::coredata(stock_data[, price_col]))
colnames(df)[2] <- ticker
dataframes[[ticker]] <- df
}
merged_df <- Reduce(function(x, y) merge(x, y,
by = "date",
all = TRUE),
dataframes)
if (omit_na) {
merged_df <- merged_df[complete.cases(merged_df), ]
}
if (frequency == "monthly") {
# Set the date to the first day of each month
merged_df$date <- as.Date(format(merged_df$date, "%Y-%m-01"))
aggregated_df <- data.frame(date = unique(merged_df$date), stringsAsFactors = FALSE)
for (col in names(merged_df)[-1]) {
aggregated_df[[col]] <- aggregate(merged_df[[col]], by = list(merged_df$date), FUN = function(x) mean(x, na.rm = !omit_na))$x
}
merged_df <- aggregated_df
} else if (frequency == "yearly") {
# Set the date to the first day of each year
merged_df$date <- as.Date(format(merged_df$date, "%Y-01-01"))
aggregated_df <- data.frame(date = unique(merged_df$date), stringsAsFactors = FALSE)
for (col in names(merged_df)[-1]) {
aggregated_df[[col]] <- aggregate(merged_df[[col]], by = list(merged_df$date), FUN = function(x) mean(x, na.rm = !omit_na))$x
}
merged_df <- aggregated_df
}
# Replace "nan" with "NA"
merged_df[is.nan(merged_df)] <- NA
rownames(merged_df) <- NULL
return(merged_df)
}
daily_nas <- testprice(c("TSLA", "AAPL", "BTC-USD", "ADA-USD"),
omit_na = F,
start_date = "2000-01-01",
frequency = "daily")
# Function ENV ============================================
testprice <- function(tickers,
start_date = (lubridate::today() - 365),
end_date = lubridate::today(),
omit_na = FALSE,
frequency = "daily") {
start_date <- as.Date(start_date)
end_date <- as.Date(end_date)
valid_frequencies <- c("daily", "monthly", "yearly")
if (!(frequency %in% valid_frequencies)) {
warning("Invalid frequency. Please use 'daily', 'monthly', or 'yearly'.")
return(NULL)
}
dataframes <- list()
for (ticker in tickers) {
stock_data <- quantmod::getSymbols(ticker,
from = start_date,
to = end_date,
auto.assign = FALSE
)
price_col <- paste0(ticker, ".Close")
df <- data.frame(date = zoo::index(stock_data),
Close = zoo::coredata(stock_data[, price_col]))
colnames(df)[2] <- ticker
dataframes[[ticker]] <- df
}
merged_df <- Reduce(function(x, y) merge(x, y,
by = "date",
all = TRUE),
dataframes)
if (omit_na) {
merged_df <- merged_df[complete.cases(merged_df), ]
}
if (frequency == "monthly") {
# Set the date to the first day of each month
merged_df$date <- as.Date(format(merged_df$date, "%Y-%m-01"))
aggregated_df <- data.frame(date = unique(merged_df$date), stringsAsFactors = FALSE)
for (col in names(merged_df)[-1]) {
aggregated_df[[col]] <- aggregate(merged_df[[col]], by = list(merged_df$date), FUN = function(x) mean(x, na.rm = !omit_na))$x
}
merged_df <- aggregated_df
} else if (frequency == "yearly") {
# Set the date to the first day of each year
merged_df$date <- as.Date(format(merged_df$date, "%Y-01-01"))
aggregated_df <- data.frame(date = unique(merged_df$date), stringsAsFactors = FALSE)
for (col in names(merged_df)[-1]) {
aggregated_df[[col]] <- aggregate(merged_df[[col]], by = list(merged_df$date), FUN = function(x) mean(x, na.rm = !omit_na))$x
}
merged_df <- aggregated_df
}
# Replace "nan" with "NA" in each data frame
for (i in seq_along(merged_df)) {
merged_df[[i]][is.nan(merged_df[[i]])] <- NA
}
rownames(merged_df) <- NULL
return(merged_df)
}
daily_nas <- testprice(c("TSLA", "AAPL", "BTC-USD", "ADA-USD"),
omit_na = F,
start_date = "2000-01-01",
frequency = "daily")
tail(daily_nas)
View(daily_nas)
daily_nas <- testprice(c("TSLA", "AAPL", "BTC-USD", "ADA-USD"),
omit_na = F,
start_date = "2000-01-01",
frequency = "monthly")
tail(daily_nas)
View(daily_nas)
daily_nas <- testprice(c("TSLA", "AAPL", "BTC-USD", "ADA-USD"),
omit_na = F,
start_date = "2000-01-01",
frequency = "yearly")
tail(daily_nas)
View(daily_nas)
daily_nas <- testprice(
c("TSLA", "AAPL", "BTC-USD", "ADA-USD"),
omit_na = T,
start_date = "2000-01-01",
frequency = "yearly")
View(daily_nas)
daily_nas <- testprice(
c("TSLA", "AAPL", "BTC-USD", "ADA-USD"),
omit_na = T,
start_date = "2000-01-01",
frequency = "monthly")
View(daily_nas)
daily_nas <- testprice(
c("TSLA", "AAPL", "BTC-USD", "ADA-USD"),
omit_na = F,
start_date = "2000-01-01",
frequency = "monthly")
View(daily_nas)
daily_nas <- get_price(
c("TSLA", "AAPL", "BTC-USD", "ADA-USD"),
omit_na = F,
start_date = "2000-01-01",
frequency = "monthly")
View(daily_nas)
devtools::load_all(".")
library(assetr)
library(assetr)
daily_nas <- get_price(
c("TSLA", "AAPL", "BTC-USD", "ADA-USD"),
omit_na = F,
start_date = "2000-01-01",
frequency = "monthly")
tail(daily_nas)
View(daily_nas)
library(assetr)
library(assetr)
get_price("AAPL")
?assetr
?get_price
help(package = "assetr")
library(assetr)
help(package = "assetr")
library(assetr)
help(package = "assetr")
library(assetr)
world_indices
world_indices$tickers
